* 코드 칠때 줄바꿈 알아서 안되거나 안쪽에 빨간박스 뜰때 해결법 => ctrl+ , 누른후 검색창에 bracket pair colorization 하고 체크표시된거 모두 해제
 
10/31
***오후수업때 router2을 router2_2 으로 복사해서 tap 페이지 추가해서 작업해보기
***후에 연락처 페이지에 firebase만든 후 
***배포 & 연동 한가지 파일로 다 해보기 => https://router2-2-seven.vercel.app/


// setNumber → 상태를 바꾸는 함수(update 함수)
  // useState() => 초기값. useState()라는 React Hook 함수를 통해 한 쌍으로 생성된 변수들
  // state — 현재 상태값을 저장하는 변수
  // setState() — 그 값을 변경하는 전용 함수

참조(ref) => 돔 선택하는 기능 가능함
Hook은 React의 “내장 함수”로, 함수형 컴포넌트에서도 상태(state)·생명주기(lifecycle)·참조(ref) 등을 사용할 수 있게 해주는 도구
“함수형 컴포넌트 내부에서만” 호출할 수 있음

// 대괄호 [] = > 순서가 있는 값들의 리스트형 데이터를 표현할 때 or 배열 비구조화 할당으로 요소를 꺼낼 때 사용
// 중괄호 {} => 이름(key)과 값(value)의 쌍으로 이루어진 데이터 묶음을 표현할 때 사용
//  소괄호 안 중괄호 ({}) =>  props 객체에서 필요한 값만 꺼내서 변수로 받는 구조

// ...inputs => 기존 상태 복사

//concat은 기존의 배열을 수정하지 않고 새 배열 반환하는 속성

※ 비구조화 할당(구조분해, Destructuring Assignment) 의 핵심은 “배열/객체에서 값을 꺼내 변수로 빠르게 바인딩하는 문법


※ slice()메서드는 원본을 수정하지 않고 배열이나 문자열의 일부를 추출하여 새 배열이나 문자열로 반환하는 데 사용


※ useEffect 함수 사용시 빈 배열 사용하는 이유

형태	실행 시점	대표 사용 예
useEffect(() => {...}, [])	마운트 시 한 번만	이벤트 등록, 초기 데이터, 타이머
useEffect(() => {...}, [변수])	변수 변경 시	API 재요청, DOM 업데이트
useEffect(() => {...})	매 렌더링마다	거의 사용 X (디버깅용)

useEffect는 “렌더링 후 자동 호출되는 함수”
두 번째 배열은 “감시 카메라 리스트”입니다.

- []: “감시대상 없음 → 한 번만 실행”
- [count]: “count만 감시 → count 바뀔 때만 실행”
- 없음: “모두 감시 → 렌더링마다 실행”


＊＊ useEffect 함수는 의존성 배열이 왜 필요함 도대체?＊＊ 걍 외우시길..
이유 1: React는 렌더링을 자주 다시 하기 때문
이유 2: “어떤 값이 바뀔 때만” 실행하고 싶기 때문
이유 3: “값의 최신 상태”를 정확히 반영하기 위해

=====> React는 렌더링마다 독립적인 함수 실행 컨텍스트를 만든단말임
=====> 즉, 렌더링이 새로 되면 이전 렌더링의 변수와 함수는 사라짐
=====> 그래서 의존성 배열에 변수를 안 넣으면, React는 “이 effect가 어떤 값에 의존하는지”를 추적할 수 없음.
=====> 그럼 “stale closure”(오래된 값 참조) 문제로 잘못된 상태를 읽게 됨요. 그러므로 의존성 배열이 필요한것

★  “React가 언제 effect를 다시 실행해야 하는지 알려주는 신호등이 바로 의존성 배열이다.” ★



※ const onChangeSearch = (e) => {
    setsearch(e.target.value);
  }
함수 실행 시 매개변수로e값 넣어줌 e.target.value => 키보드나 마우스 이벤트 실행될때 무조건 넣어야함

※ map 메소드 사용시 key값 id는 무조건 입력해야함
public파일 내의 이미지 경로는 ./ 으로만 작성해도 인식함

※ 큰 div가 2개 이상일 경우 무조건 하나의 div로 감싸줘야 함


<터미널 명령어>
vite 설치: npm create vite@latest .
router 설치 : vite 설치 후 npm i react-router-dom
	ㄴ main.jsx 파일에서 import { BrowserRouter } from "react-router-dom"; 해주고
	ㄴ <BrowserRouter></BrowserRouter>
slick 설치 : npm i bootstrap react-slick slick-carousel
swiper설치 : npm i swiper
react dom 과 swiper 동시에 프로그램 설치 : npm i react-dom swiper
firebase 설치 : npm i firebase
잘못 설치한 프로그램 삭제 : npm uninstall react-icon => uninstall 작성

※프로그램 설치 후 app.css내용 다 지우고, index.css에는 이 값을 넣어주는게 좋음
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

html {
  scroll-behavior: smooth;
}

※ 리액트 아이콘 설치 명령어 : npm install react-icons
import { useState } from 'react'
import Slider from 'react-slick'
import { FaArrowLeft, FaArrowRight } from 'react-icons/fa'
import 'bootstrap/dist/css/bootstrap.min.css'
import 'slick-carousel/slick/slick.css'
import 'slick-carousel/slick/slick-theme.css'
import './App.css'

function App() {
  const [currentSlide, setCurrentSlide] = useState(0)

  const images = [
    { id: 1, src: 'https://via.placeholder.com/800x400/FF6B6B/FFFFFF?text=Image+1', alt: 'Image 1' },
    { id: 2, src: 'https://via.placeholder.com/800x400/4ECDC4/FFFFFF?text=Image+2', alt: 'Image 2' },
    { id: 3, src: 'https://via.placeholder.com/800x400/45B7D1/FFFFFF?text=Image+3', alt: 'Image 3' },
    { id: 4, src: 'https://via.placeholder.com/800x400/96CEB4/FFFFFF?text=Image+4', alt: 'Image 4' },
    { id: 5, src: 'https://via.placeholder.com/800x400/FFEAA7/FFFFFF?text=Image+5', alt: 'Image 5' },
    { id: 6, src: 'https://via.placeholder.com/800x400/DDA15E/FFFFFF?text=Image+6', alt: 'Image 6' }
  ]

  // 커스텀 화살표
  const CustomPrev = ({ onClick }) => (
    <button className="custom-arrow custom-prev" onClick={onClick}>
      <FaArrowLeft />
    </button>
  )

  const CustomNext = ({ onClick }) => (
    <button className="custom-arrow custom-next" onClick={onClick}>
      <FaArrowRight />
    </button>
  )

  const settings = {
    dots: true,
    infinite: true,
    speed: 500,
    slidesToShow: 3,
    slidesToScroll: 1,
    autoplay: true,
    autoplaySpeed: 3000,
    beforeChange: (current, next) => setCurrentSlide(next),
    arrows: true,
    fade: false,
    prevArrow: <CustomPrev />,
    nextArrow: <CustomNext />,
    responsive: [
      { breakpoint: 992, settings: { slidesToShow: 2 } },
      { breakpoint: 768, settings: { slidesToShow: 1 } }
    ]
  }

  return (
    <div className="container mt-5">
      <div className="row justify-content-center">
        <div className="col-md-10">
          <h2 className="text-center mb-4">이미지 슬라이더</h2>
          <div className="slider-wrapper">
            <Slider {...settings}>
              {images.map((image) => (
                <div key={image.id} className="slide-item">
                  <div className="px-2">
                    <img 
                      src={image.src} 
                      alt={image.alt} 
                      className="img-fluid w-100"
                      style={{ height: '300px', objectFit: 'cover' }}
                    />
                    <div className="slide-caption mt-2">
                      <h6>{image.alt}</h6>
                    </div>
                  </div>
                </div>
              ))}
            </Slider>
          </div>
          <div className="text-center mt-3">
            <p className="text-muted">
              현재 이미지: {currentSlide + 1} / {images.length}
            </p>
          </div>
        </div>
      </div>
    </div>
  )
}

export default App


