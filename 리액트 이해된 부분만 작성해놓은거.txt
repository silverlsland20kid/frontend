
  // setNumber → 상태를 바꾸는 함수(update 함수)
  // useState() => 초기값. useState()라는 React Hook 함수를 통해 한 쌍으로 생성된 변수들
  // state — 현재 상태값을 저장하는 변수
  // setState() — 그 값을 변경하는 전용 함수

참조(ref) => 돔 선택하는 기능 가능함
Hook은 React의 “내장 함수”로, 함수형 컴포넌트에서도 상태(state)·생명주기(lifecycle)·참조(ref) 등을 사용할 수 있게 해주는 도구
“함수형 컴포넌트 내부에서만” 호출할 수 있음

// 대괄호 [] = > 순서가 있는 값들의 리스트형 데이터를 표현할 때 or 배열 비구조화 할당으로 요소를 꺼낼 때 사용
// 중괄호 {} => 이름(key)과 값(value)의 쌍으로 이루어진 데이터 묶음을 표현할 때 사용
//  소괄호 안 중괄호 ({}) =>  props 객체에서 필요한 값만 꺼내서 변수로 받는 구조

// ...inputs => 기존 상태 복사

//concat은 기존의 배열을 수정하지 않고 새 배열 반환하는 속성

※ 비구조화 할당(구조분해, Destructuring Assignment) 의 핵심은 “배열/객체에서 값을 꺼내 변수로 빠르게 바인딩하는 문법

1) 배열 비구조화 => 배열은 순서로 매칭
2) 객체 비구조화 => 객체는 키 이름으로 매칭(순서무관)
3) 중첩 구조
4) 기본값 + 별칭 + 중첩 한 번에
5) 함수 매개변수에서의 비구조화 
	-(1) 객체 매개변수
	-(2) 배열 매개변수
6) React에서 자주 쓰는 패턴
	-(1) props 비구조화
	-(2) useState
	-(3) form 상태 객체
7) 계산된 속성명(Computed Property)과 함께




slice()메서드는 원본을 수정하지 않고 배열이나 문자열의 일부를 추출하여 새 배열이나 문자열로 반환하는 데 사용
→ 만약 products 배열이 다음과 같다고 해볼게요:

const products = [
  { name: "메인상품", img: "main.jpg", category: "추천" },
  { name: "보조상품1", img: "sub1.jpg", category: "신상" },
  { name: "보조상품2", img: "sub2.jpg", category: "인기" }
];
그러면 products.slice(1)은:

[
  { name: "보조상품1", img: "sub1.jpg", category: "신상" },
  { name: "보조상품2", img: "sub2.jpg", category: "인기" }
]
즉 첫 번째 상품(메인 상품) 은 제외하고,
그 다음 상품들(사이드 상품) 만 화면에 렌더링합니다.


 Ut enim ad minim veniam, quis
                    nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.

const onChangeSearch = (e) => {
    setsearch(e.target.value);
  }
함수 실행 시 매개변수로e값 넣어줌 e.target.value => 키보드나 마우스 이벤트

map 메소드 사용시 key값 id는 무조건 입력해야함
public파일 내의 이미지 경로는 ./ 으로만 작성해도 인식함
큰 div가 2개 이상일 경우 무조건 하나의 div로 감싸줘야 함

<터미널 명령어>
slick 설치 : npm i bootstrap react-slick slick-carousel
vite 설치: npm create vite@latest .
swiper설치 : npm i swiper
router 설치 : vite 설치 후 npm i react-router-dom


※ 리액트 아이콘 설치 : npm install react-icons
import { useState } from 'react'
import Slider from 'react-slick'
import { FaArrowLeft, FaArrowRight } from 'react-icons/fa'
import 'bootstrap/dist/css/bootstrap.min.css'
import 'slick-carousel/slick/slick.css'
import 'slick-carousel/slick/slick-theme.css'
import './App.css'

function App() {
  const [currentSlide, setCurrentSlide] = useState(0)

  const images = [
    { id: 1, src: 'https://via.placeholder.com/800x400/FF6B6B/FFFFFF?text=Image+1', alt: 'Image 1' },
    { id: 2, src: 'https://via.placeholder.com/800x400/4ECDC4/FFFFFF?text=Image+2', alt: 'Image 2' },
    { id: 3, src: 'https://via.placeholder.com/800x400/45B7D1/FFFFFF?text=Image+3', alt: 'Image 3' },
    { id: 4, src: 'https://via.placeholder.com/800x400/96CEB4/FFFFFF?text=Image+4', alt: 'Image 4' },
    { id: 5, src: 'https://via.placeholder.com/800x400/FFEAA7/FFFFFF?text=Image+5', alt: 'Image 5' },
    { id: 6, src: 'https://via.placeholder.com/800x400/DDA15E/FFFFFF?text=Image+6', alt: 'Image 6' }
  ]

  // 커스텀 화살표
  const CustomPrev = ({ onClick }) => (
    <button className="custom-arrow custom-prev" onClick={onClick}>
      <FaArrowLeft />
    </button>
  )

  const CustomNext = ({ onClick }) => (
    <button className="custom-arrow custom-next" onClick={onClick}>
      <FaArrowRight />
    </button>
  )

  const settings = {
    dots: true,
    infinite: true,
    speed: 500,
    slidesToShow: 3,
    slidesToScroll: 1,
    autoplay: true,
    autoplaySpeed: 3000,
    beforeChange: (current, next) => setCurrentSlide(next),
    arrows: true,
    fade: false,
    prevArrow: <CustomPrev />,
    nextArrow: <CustomNext />,
    responsive: [
      { breakpoint: 992, settings: { slidesToShow: 2 } },
      { breakpoint: 768, settings: { slidesToShow: 1 } }
    ]
  }

  return (
    <div className="container mt-5">
      <div className="row justify-content-center">
        <div className="col-md-10">
          <h2 className="text-center mb-4">이미지 슬라이더</h2>
          <div className="slider-wrapper">
            <Slider {...settings}>
              {images.map((image) => (
                <div key={image.id} className="slide-item">
                  <div className="px-2">
                    <img 
                      src={image.src} 
                      alt={image.alt} 
                      className="img-fluid w-100"
                      style={{ height: '300px', objectFit: 'cover' }}
                    />
                    <div className="slide-caption mt-2">
                      <h6>{image.alt}</h6>
                    </div>
                  </div>
                </div>
              ))}
            </Slider>
          </div>
          <div className="text-center mt-3">
            <p className="text-muted">
              현재 이미지: {currentSlide + 1} / {images.length}
            </p>
          </div>
        </div>
      </div>
    </div>
  )
}

export default App
